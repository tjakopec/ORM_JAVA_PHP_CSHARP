// <auto-generated />
using System;
using CSHARP;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CSHARP.Migrations
{
    [DbContext(typeof(ORMContext))]
    [Migration("20220601113056_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CSHARP.Model.Igrac", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ime")
                        .HasColumnType("longtext");

                    b.Property<string>("prezime")
                        .HasColumnType("longtext");

                    b.Property<int>("spol")
                        .HasColumnType("int");

                    b.Property<string>("urlSlika")
                        .HasColumnType("longtext")
                        .HasColumnName("urlslika");

                    b.HasKey("id");

                    b.ToTable("igrac");
                });

            modelBuilder.Entity("CSHARP.Model.Lokacija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("latitude")
                        .HasColumnType("double");

                    b.Property<double>("longitude")
                        .HasColumnType("double");

                    b.Property<string>("naziv")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("lokacija");
                });

            modelBuilder.Entity("CSHARP.Model.Mjesanje", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("belot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("stiglja")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("vrsta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("mjesanje");

                    b.HasDiscriminator<string>("vrsta").HasValue("Mjesanje");
                });

            modelBuilder.Entity("CSHARP.Model.Partija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("doKolikoSeIgra")
                        .HasColumnType("int")
                        .HasColumnName("dokolikoseigra");

                    b.Property<int>("lokacijaid")
                        .HasColumnType("int");

                    b.Property<int>("unosiid")
                        .HasColumnType("int");

                    b.Property<string>("vrsta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("lokacijaid");

                    b.HasIndex("unosiid");

                    b.ToTable("partija");

                    b.HasDiscriminator<string>("vrsta").HasValue("Partija");
                });

            modelBuilder.Entity("IgracPartijaTriIgraca", b =>
                {
                    b.Property<int>("igraciid")
                        .HasColumnType("int");

                    b.Property<int>("partijeid")
                        .HasColumnType("int");

                    b.HasKey("igraciid", "partijeid");

                    b.HasIndex("partijeid");

                    b.ToTable("partija_igrac", (string)null);
                });

            modelBuilder.Entity("CSHARP.Model.MjesanjeDvaUnosa", b =>
                {
                    b.HasBaseType("CSHARP.Model.Mjesanje");

                    b.Property<int>("bodovaDrugiUnos")
                        .HasColumnType("int")
                        .HasColumnName("bodovadrugiunos");

                    b.Property<int>("bodovaPrviUnos")
                        .HasColumnType("int")
                        .HasColumnName("bodovaprviunos");

                    b.Property<int>("zvanjeDrugiUnos")
                        .HasColumnType("int")
                        .HasColumnName("zvanjedrugiunos");

                    b.Property<int>("zvanjePrviUnos")
                        .HasColumnType("int")
                        .HasColumnName("zvanjeprviunos");

                    b.ToTable("mjesanje");

                    b.HasDiscriminator().HasValue("dvaUnosa");
                });

            modelBuilder.Entity("CSHARP.Model.PartijaDvaIgraca", b =>
                {
                    b.HasBaseType("CSHARP.Model.Partija");

                    b.ToTable("partija");

                    b.HasDiscriminator().HasValue("dvaIgraca");
                });

            modelBuilder.Entity("CSHARP.Model.PartijaDvaPara", b =>
                {
                    b.HasBaseType("CSHARP.Model.Partija");

                    b.ToTable("partija");

                    b.HasDiscriminator().HasValue("dvaPara");
                });

            modelBuilder.Entity("CSHARP.Model.PartijaTriIgraca", b =>
                {
                    b.HasBaseType("CSHARP.Model.Partija");

                    b.ToTable("partija");

                    b.HasDiscriminator().HasValue("triIgraca");
                });

            modelBuilder.Entity("CSHARP.Model.MjesanjeTriUnosa", b =>
                {
                    b.HasBaseType("CSHARP.Model.MjesanjeDvaUnosa");

                    b.Property<int?>("Partijaid")
                        .HasColumnType("int");

                    b.Property<int>("bodovaTreciUnos")
                        .HasColumnType("int")
                        .HasColumnName("bodovatreciunos");

                    b.Property<int>("zvanjeTreciUnos")
                        .HasColumnType("int")
                        .HasColumnName("zvanjetreciunos");

                    b.HasIndex("Partijaid");

                    b.ToTable("mjesanje");

                    b.HasDiscriminator().HasValue("triUnosa");
                });

            modelBuilder.Entity("CSHARP.Model.Partija", b =>
                {
                    b.HasOne("CSHARP.Model.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("lokacijaid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSHARP.Model.Igrac", "unosi")
                        .WithMany()
                        .HasForeignKey("unosiid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lokacija");

                    b.Navigation("unosi");
                });

            modelBuilder.Entity("IgracPartijaTriIgraca", b =>
                {
                    b.HasOne("CSHARP.Model.Igrac", null)
                        .WithMany()
                        .HasForeignKey("igraciid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CSHARP.Model.PartijaTriIgraca", null)
                        .WithMany()
                        .HasForeignKey("partijeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSHARP.Model.MjesanjeTriUnosa", b =>
                {
                    b.HasOne("CSHARP.Model.Partija", null)
                        .WithMany("mjesanja")
                        .HasForeignKey("Partijaid");
                });

            modelBuilder.Entity("CSHARP.Model.Partija", b =>
                {
                    b.Navigation("mjesanja");
                });
#pragma warning restore 612, 618
        }
    }
}
